import { SignatureVerifier, SignatureUtils } from '../src/signature';

/**
 * Demo: Signature verification compatible with Go server
 * 
 * This example demonstrates how to verify signatures generated by your Go server:
 * 
 * func generateTestSignature(payload []byte, secret string) string {
 *     h := hmac.New(sha256.New, []byte(secret))
 *     h.Write(payload)
 *     return hex.EncodeToString(h.Sum(nil))
 * }
 */

// Example 1: Simple webhook verification
function webhookExample() {
  console.log('=== Webhook Verification Example ===');
  
  const secret = 'your-webhook-secret';
  const webhookPayload = {
    event: 'user.created',
    userId: '12345',
    email: 'user@example.com',
    timestamp: '2023-12-01T10:00:00Z'
  };
  
  // Generate signature (simulates what your Go server would do)
  const payloadString = JSON.stringify(webhookPayload);
  const signature = SignatureUtils.generate(payloadString, secret);
  
  console.log('Webhook payload:', webhookPayload);
  console.log('Generated signature:', signature);
  
  // Verify signature (what your TypeScript client would do)
  const isValid = SignatureUtils.verifyJson(webhookPayload, signature, secret);
  console.log('Signature valid:', isValid);
  
  // Test with tampered data
  const tamperedPayload = { ...webhookPayload, userId: 'hacker' };
  const isTamperedValid = SignatureUtils.verifyJson(tamperedPayload, signature, secret);
  console.log('Tampered payload valid:', isTamperedValid);
  console.log('');
}

// Example 2: API response verification with class instance
function apiResponseExample() {
  console.log('=== API Response Verification Example ===');
  
  const secret = 'api-secret-key';
  const verifier = new SignatureVerifier(secret);
  
  const apiResponse = {
    status: 'success',
    data: ['item1', 'item2', 'item3'],
    metadata: { total: 3, page: 1 }
  };
  
  // Generate signature for response
  const signature = verifier.generateSignature(JSON.stringify(apiResponse));
  console.log('API response:', apiResponse);
  console.log('Response signature:', signature);
  
  // Verify response integrity
  const isValid = verifier.verifyJsonSignature(apiResponse, signature);
  console.log('Response integrity verified:', isValid);
  console.log('');
}

// Example 3: File/binary data verification
function binaryDataExample() {
  console.log('=== Binary Data Verification Example ===');
  
  const secret = 'file-integrity-secret';
  
  // Simulate file content
  const fileContent = Buffer.from('This is file content that needs verification');
  
  // Generate signature for file
  const signature = SignatureUtils.generate(fileContent, secret);
  console.log('File content length:', fileContent.length, 'bytes');
  console.log('File signature:', signature);
  
  // Verify file integrity
  const isValid = SignatureUtils.verify(fileContent, signature, secret);
  console.log('File integrity verified:', isValid);
  
  // Test with corrupted file
  const corruptedFile = Buffer.from('This is CORRUPTED file content');
  const isCorruptedValid = SignatureUtils.verify(corruptedFile, signature, secret);
  console.log('Corrupted file valid:', isCorruptedValid);
  console.log('');
}

// Example 4: Express.js middleware simulation
function expressMiddlewareExample() {
  console.log('=== Express Middleware Simulation ===');
  
  const secret = 'webhook-secret';
  
  // Simulate Express request
  const mockRequest = {
    headers: { 'x-signature': '' },
    body: { message: 'Hello from webhook!' },
    rawBody: JSON.stringify({ message: 'Hello from webhook!' })
  };
  
  // Generate signature (as Go server would)
  const signature = SignatureUtils.generate(mockRequest.rawBody, secret);
  mockRequest.headers['x-signature'] = signature;
  
  console.log('Request headers:', mockRequest.headers);
  console.log('Request body:', mockRequest.body);
  
  // Middleware verification logic
  function verifyWebhookSignature(req: typeof mockRequest): boolean {
    const receivedSignature = req.headers['x-signature'];
    if (!receivedSignature) {
      console.log('Missing signature header');
      return false;
    }
    
    const payload = req.rawBody;
    return SignatureUtils.verify(payload, receivedSignature, secret);
  }
  
  const isValid = verifyWebhookSignature(mockRequest);
  console.log('Webhook middleware verification:', isValid ? 'PASSED' : 'FAILED');
  console.log('');
}

// Example 5: Performance and compatibility test
function performanceTest() {
  console.log('=== Performance & Compatibility Test ===');
  
  const secret = 'performance-test-secret';
  const testPayload = JSON.stringify({
    large_array: Array.from({ length: 1000 }, (_, i) => ({ id: i, value: `item-${i}` }))
  });
  
  console.log('Test payload size:', testPayload.length, 'characters');
  
  // Test signature generation/verification performance
  const iterations = 1000;
  
  console.time('Generate signatures');
  const signatures: string[] = [];
  for (let i = 0; i < iterations; i++) {
    signatures.push(SignatureUtils.generate(testPayload, secret));
  }
  console.timeEnd('Generate signatures');
  
  console.time('Verify signatures');
  let validCount = 0;
  for (let i = 0; i < iterations; i++) {
    if (SignatureUtils.verify(testPayload, signatures[i], secret)) {
      validCount++;
    }
  }
  console.timeEnd('Verify signatures');
  
  console.log('All signatures valid:', validCount === iterations);
  console.log('First signature:', signatures[0]);
  console.log('All signatures identical:', signatures.every(sig => sig === signatures[0]));
  console.log('');
}

// Example 6: Real-world webhook handler
function realWorldWebhookHandler() {
  console.log('=== Real-World Webhook Handler Example ===');
  
  const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || 'demo-secret';
  
  // Simulate webhook data from Go server
  const webhookEvents = [
    { type: 'user.created', userId: '123', email: 'user1@example.com' },
    { type: 'user.updated', userId: '123', email: 'newemail@example.com' },
    { type: 'user.deleted', userId: '123' }
  ];
  
  console.log('Processing webhook events...');
  
  webhookEvents.forEach((event, index) => {
    const payload = JSON.stringify(event);
    const signature = SignatureUtils.generate(payload, WEBHOOK_SECRET);
    
    // Simulate webhook processing
    const isValid = SignatureUtils.verifyJson(event, signature, WEBHOOK_SECRET);
    
    console.log(`Event ${index + 1}:`, event.type, isValid ? '‚úÖ' : '‚ùå');
    
    if (!isValid) {
      console.log('  ‚ö†Ô∏è  Webhook signature verification failed!');
    } else {
      console.log('  ‚úÖ Webhook processed successfully');
    }
  });
  
  console.log('');
}

// Run all examples
function runDemo() {
  console.log('üîê Signature Verification Demo - Go Server Compatible\n');
  
  webhookExample();
  apiResponseExample();
  binaryDataExample();
  expressMiddlewareExample();
  performanceTest();
  realWorldWebhookHandler();
  
  console.log('‚úÖ Demo completed! All examples show compatibility with Go server signatures.');
}

// Export for use in other files
export {
  webhookExample,
  apiResponseExample,
  binaryDataExample,
  expressMiddlewareExample,
  performanceTest,
  realWorldWebhookHandler,
  runDemo
};

// Run demo if this file is executed directly
if (require.main === module) {
  runDemo();
}